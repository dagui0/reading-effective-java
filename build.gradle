/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '2.1.21'
}

ext {
    javaVersion = 23
    lombokVersion = '1.18.38'
    kotlinVersion = '2.1.21'
    guavaVersion = '33.4.8-jre'
    springVersion = '6.2.7'
    lang3Version = '3.17.0'
    jetbrainAnnotationVersion = '26.0.2'
    javaxAnnotationVersion = '1.3.2'
    eclipseAnnotationVersion = '2.0.0'
    checkerVersion = '3.49.2'
    validationVersion = '2.0.1.Final'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.springframework:spring-core:${springVersion}"
    implementation "org.springframework:spring-webmvc:${springVersion}"
    implementation "org.apache.commons:commons-lang3:${lang3Version}"
    implementation "org.jetbrains:annotations:${jetbrainAnnotationVersion}"
    implementation "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}"
    implementation "org.eclipse.jdt:org.eclipse.jdt.annotation:${eclipseAnnotationVersion}"
    implementation "org.checkerframework:checker-qual:${checkerVersion}"
    implementation "javax.validation:validation-api:${validationVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava
    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlinVersion}"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

compileJava {
    options.compilerArgs << '-Xlint:all'
}

javadoc {
    destinationDir = file("${projectDir}/docs/api")
}

// delombok
configurations {
    delombok
}
dependencies {
    delombok "org.projectlombok:lombok:${lombokVersion}"
}
// Delombok 태스크 정의
task delombok(type: JavaExec) {
    group = 'lombok'
    description = 'Generates delomboked source files.'

    // Delombok된 소스를 저장할 디렉토리
    def delombokedSourcesDir =
            layout.buildDirectory.dir("generated/sources/delombok/java/main").get().asFile
    outputs.dir(delombokedSourcesDir) // 태스크의 출력 디렉토리 지정

    // 입력 소스 디렉토리 (일반적으로 src/main/java)
    def sourceDir = sourceSets.main.java.srcDirs.iterator().next() // 단일 소스 디렉토리 가정
    // 여러 개면 sourceSets.main.java.srcDirs 사용
    inputs.dir(sourceDir) // 태스크의 입력 디렉토리 지정

    mainClass = 'lombok.launch.Main' // Lombok 실행 클래스
    classpath = configurations.delombok // Delombok Configuration 사용
    args = [
            'delombok',
            sourceDir.absolutePath, // 원본 소스 경로
            '-d', delombokedSourcesDir.absolutePath, // 출력 디렉토리
            // 추가적인 delombok 옵션들 (필요에 따라)
            // '-f', 'pretty', // 포맷팅 옵션 (예: pretty, compact)
            // '-c', project.configurations.compileClasspath.asPath, // 컴파일 클래스패스 (복잡한 경우 필요할 수 있음)
            // '--sourcepath', sourceSets.main.java.srcDirs.join(File.pathSeparator) // 소스 경로 (여러 개인 경우)
    ]
    doFirst {
        delombokedSourcesDir.deleteDir() // 실행 전 이전 결과 삭제
        delombokedSourcesDir.mkdirs()    // 출력 디렉토리 생성
    }
}

tasks.javadoc {
//    dependsOn delombok
//    source = fileTree(
//            dir: layout.buildDirectory.dir("generated/sources/delombok/java/main").get().asFile,
//            includes: ['**/*.java'])
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        title = "${project.name} ${project.version}".toString()
        version = true
        memberLevel = JavadocMemberLevel.PRIVATE
        links = [
            "https://docs.oracle.com/en/java/javase/${javaVersion}/docs/api/".toString(),
            "https://javadoc.io/doc/org.projectlombok/lombok/${lombokVersion}/".toString(),
            "https://javadoc.io/doc/com.google.guava/guava/${guavaVersion}/".toString(),
            "https://javadoc.io/doc/org.springframework/spring-core/${springVersion}/".toString(),
            "https://javadoc.io/doc/org.springframework/spring-webmvc/${springVersion}/".toString(),
            "https://javadoc.io/doc/org.apache.commons/commons-lang3/${lang3Version}/".toString(),
            "https://javadoc.io/doc/org.jetbrains/annotations/${jetbrainAnnotationVersion}/".toString(),
            "https://javadoc.io/doc/javax.annotation/javax.annotation-api/${javaxAnnotationVersion}/".toString(),
            "https://javadoc.io/doc/org.eclipse.jdt/org.eclipse.jdt.annotation/${eclipseAnnotationVersion}/".toString(),
            "https://javadoc.io/doc/org.checkerframework/checker-qual/${checkerVersion}/".toString(),
            "https://javadoc.io/doc/javax.validation/validation-api/${validationVersion}/".toString(),
        ]
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.0
    useJUnitPlatform()
}

// apply --enable-preview
//tasks.withType(JavaCompile).configureEach {
//    options.compilerArgs << '--enable-preview'
//}
//tasks.withType(Test).configureEach {
//    jvmArgs '--enable-preview'
//}
//tasks.withType(JavaExec).configureEach {
//    jvmArgs '--enable-preview'
//}

apply from: "$project.rootDir/native.gradle"
tasks.named('test', setNativeLibPath)
